{
	"name": "stackoverflow_db_ingest_parallel",
	"properties": {
		"folder": {
			"name": "stackoverflow"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pythonsession",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "122f94ab-8cf1-4f75-8035-dbc8aaf360eb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b99affbe-2256-409d-a682-c20a3963070b/resourceGroups/datakickstart-synapse-rg/providers/Microsoft.Synapse/workspaces/datakickstart-synapse/bigDataPools/pythonsession",
				"name": "pythonsession",
				"type": "Spark",
				"endpoint": "https://datakickstart-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pythonsession",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 10
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"database = \"StackOverflow2010\"\r\n",
					"db_host_name = \"sandbox-2-sqlserver.database.windows.net\"\r\n",
					"db_url = f\"jdbc:sqlserver://{db_host_name};databaseName={database}\"\r\n",
					"db_user = mssparkutils.credentials.getSecretWithLS(\"demokv\", \"sql-user-stackoverflow\")\r\n",
					"db_password = mssparkutils.credentials.getSecretWithLS(\"demokv\", \"sql-pwd-stackoverflow\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"CREATE DATABASE IF NOT EXISTS raw_stackoverflow LOCATION '/demo/raw_stackoverflow'\")\r\n",
					"table_list = [\"Badges\", \"Comments\", \"LinkTypes\", \"PostLinks\", \"Posts\", \"PostTypes\", \"Users\", \"Votes\", \"VoteTypes\"]\r\n",
					"\r\n",
					"def load_table(table):\r\n",
					"    print(table)\r\n",
					"    destination_table = \"raw_stackoverflow.\" + table\r\n",
					"\r\n",
					"    df = (\r\n",
					"        spark.read\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\")\r\n",
					"        .option(\"url\", db_url)\r\n",
					"        .option(\"dbtable\", table)\r\n",
					"        .option(\"user\", db_user)\r\n",
					"        .option(\"password\", db_password)\r\n",
					"        .load()\r\n",
					"    )\r\n",
					"\r\n",
					"    df.write.format(\"parquet\").mode(\"overwrite\").saveAsTable(destination_table)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"from threading import Thread\r\n",
					"from queue import Queue\r\n",
					"\r\n",
					"q = Queue()\r\n",
					"\r\n",
					"worker_count = 2\r\n",
					"\r\n",
					"def run_tasks(function, q):\r\n",
					"    while not q.empty():\r\n",
					"        value = q.get()\r\n",
					"        function(value)\r\n",
					"        q.task_done()\r\n",
					"\r\n",
					"\r\n",
					"print(table_list)\r\n",
					"\r\n",
					"for table in table_list:\r\n",
					"    q.put(table)\r\n",
					"\r\n",
					"for i in range(worker_count):\r\n",
					"    t=Thread(target=run_tasks, args=(load_table, q))\r\n",
					"    t.daemon = True\r\n",
					"    t.start()\r\n",
					"\r\n",
					"print(\"Running load\")\r\n",
					"q.join()\r\n",
					"print(\"Load completed\")\r\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}